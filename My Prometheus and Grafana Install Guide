Monitoring with Prometheus and Grafana

I used the following steps in installing Prometheus and Grafana on the Kubernetes node

Step1: Create a new namespace for Prometheus and Grafana. You can use the kubectl create namespace command to create a new namespace:

•	kubectl create namespace monitoring

Step2: Create a Prometheus deployment in the monitoring namespace. You can use the following YAML manifest to create the deployment:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.30.3
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config

I saved the above manifest in a file named prometheus-deployment.yaml, and then created the deployment using the following command:
•	kubectl apply -f prometheus-deployment.yaml

Step3: Create a Prometheus ConfigMap. You can use the following YAML manifest to create the ConfigMap:

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__address__]
            action: replace
            target_label: __hostname__
          - source_labels: [__hostname__]
            action: replace
            target_label: instance
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: http|https|grpc|Prometheus
I saved the above manifest in a file named prometheus-configmap.yaml, and then created the ConfigMap using the following command:

•	kubectl apply -f prometheus-configmap.yaml

Step4: Expose the Prometheus deployment as a Kubernetes service. You can use the following YAML manifest to create the service:

apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    targetPort: 9090
  selector:
    app: Prometheus

I saved the above manifest in a file named prometheus-service.yaml, and then created the service using the following command:

•	kubectl apply -f prometheus-service.yaml

Step5: Create a Grafana deployment in the monitoring namespace. You can use the following YAML manifest to create the deployment:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:8.1.5
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}

I saved the above manifest in a file named grafana-deployment.yaml, and then created the deployment using the following command:

•	kubectl apply -f grafana-deployment.yaml

Step6: Expose the Grafana deployment as a Kubernetes service. You can use the following YAML manifest to create the service:

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  type: NodePort
  ports:
  - name: web
    port: 80
    targetPort: 3000
  selector:
    app: Grafana

I saved the above manifest in a file named grafana-service.yaml, and then created the service using the following command:

•	kubectl apply -f grafana-service.yaml

Step7: Access the Grafana web interface. First, find the NodePort assigned to the Grafana service using the following command:

•	kubectl get svc grafana -n monitoring
This will display information about the Grafana service, including the NodePort assigned to it. Note down the NodePort number.

Next, open a web browser and navigate to http://<worker-node-IP>:<NodePort>, where <worker-node-IP> is the IP address of one of the worker nodes in your Kubernetes cluster, and <NodePort> is the NodePort number assigned to the Grafana service. This should open the Grafana web interface.

Step8: I Configured Grafana to use Prometheus as a data source. In the Grafana web interface, go to the Configuration menu and select Data Sources. Click on the Add data source button and select Prometheus as the data source type. Enter the URL of the Prometheus service (http://prometheus:9090) as the URL for the data source, and then click on the Save & Test button. This should add Prometheus as a data source in Grafana.
